/* -*- C++ -*-   vim:set syntax=cpp:
 * 
 * PURPOSE: A 'feeder' coordinates the lexical analysis based on input that
 *          is *NOT* delivered through a byte loader in the background. 
 *
 * See file 'Feeder.i' for detailed descriptions.
 *
 * (C) 2016 Frank-Rene Schaefer.                                             */
#ifndef QUEX_INCLUDE_GUARD_Calc_lexer__ANALYZER__ADAPTORS__FEEDER
#define QUEX_INCLUDE_GUARD_Calc_lexer__ANALYZER__ADAPTORS__FEEDER



typedef struct {
    struct Calc_lexer_tag* lexer;
    Calc_lexer_lexatom_t*  last_incomplete_lexeme_p;
    Calc_lexer_token_id_t  stream_terminating_token_id;
} Calc_lexer_FeederBase;


   typedef struct QUEX_Calc_lexer_SETTING_USER_CLASS_DECLARATION_EPILOG_EXT Calc_lexer_Feeder_tag {
    Calc_lexer_FeederBase  base;

    struct {
        const void* begin_p;
        const void* end_p;
    } external_chunk;

    Calc_lexer_token_id_t  stream_terminating_token_id;



    void             (*feed)(struct Calc_lexer_Feeder_tag*, 
                             const void* BeginP, const void* EndP);
    struct Calc_lexer_Token_tag* (*deliver)(struct Calc_lexer_Feeder_tag*);
} Calc_lexer_Feeder;


 void             Calc_lexer_Feeder_construct(Calc_lexer_Feeder*   me, 
                                                         struct Calc_lexer_tag* lexer,
                                                         Calc_lexer_token_id_t  StreamTerminatingTokenId);
 struct Calc_lexer_Token_tag* Calc_lexer_Feeder_deliver(Calc_lexer_Feeder* me);
 void             Calc_lexer_Feeder_feed(Calc_lexer_Feeder* me,
                                                    const void* BeginP, 
                                                    const void* EndP);



#endif /* QUEX_INCLUDE_GUARD_Calc_lexer__ANALYZER__ADAPTORS__FEEDER */
