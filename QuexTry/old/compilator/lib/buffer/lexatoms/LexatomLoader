/* -*- C++ -*- vim: set syntax=cpp: */
#ifndef  QUEX_INCLUDE_GUARD_compilator__BUFFER__LEXATOMS__LEXATOM_LOADER
#define  QUEX_INCLUDE_GUARD_compilator__BUFFER__LEXATOMS__LEXATOM_LOADER

#include "compilator\lib\definitions"
#include "compilator\lib\buffer/Buffer"
#include "compilator\lib\buffer/bytes/ByteLoader"



struct compilator_Converter_tag;
struct compilator_Buffer_tag;

typedef struct QUEX_compilator_SETTING_USER_CLASS_DECLARATION_EPILOG_EXT compilator_LexatomLoader_tag {
    /* -- byte order (i.e little- vs. big-endian) reversion: enable/disable
     *    the reversion of byte order.    
     *                                                                       */
    bool                      _byte_order_reversion_active_f;

    compilator_stream_position_t lexatom_index_next_to_fill;

    /* Byte number per lexatom. If != -1 => there is a linear relationship
     *                            between lexatom position and lexatom
     *                            index.                                     */
    ptrdiff_t                 byte_n_per_lexatom;

    /* This is the interface that the buffer sees of the buffer filler. Its
     * task is to coordinate the filling of buffer content from a stream in the
     * background. Some fillers may convert lexatoms or filter.  All fillers
     * must provide functions for the following pointers. The pointers are set
     * with the function
     *
     *              LexatomLoader_setup(...) 
     *
     * which shall be called in any '_construct' function of a filler. Note,
     * that filler types shall inherit this class. This means, that the first
     * element of the derived struct is to be of this type and best called
     * 'base'.  For example, please, consider the 'plain' and 'converter'
     * implementations in the correspondent sub directories.                 */
    compilator_ByteLoader*    byte_loader;

    /* -- 'Tell': Character index of the next lexatom to be loaded into
     *            the buffer, when 'derived.load()' is called.
     *                                                                       */
    compilator_stream_position_t   
                (*input_lexatom_tell)(struct compilator_LexatomLoader_tag*);

    /* -- 'Seek': Sets the lexatom index of the next lexatom to be loaded
     *            into the buffer, when 'derived.load()' is 
     *            called.
     *                                                                       */
    bool        (*input_lexatom_seek)(struct compilator_LexatomLoader_tag*,
                                        const compilator_stream_position_t Index);

    /* -- 'Stomach Byte Number': is the number of bytes that have been read
     *                           from the stream but not yet converted.      
     *                                                                       */
    ptrdiff_t   (*stomach_byte_n)(struct compilator_LexatomLoader_tag*);

    /* -- 'Clear': Undo any internal state-dependency. Conversion or what-
     *             soever starts from a clean page.   
     *                                                                       */
    void        (*stomach_clear)(struct compilator_LexatomLoader_tag*);       
                                                                             
    /* -- 'Delete Operator': There are derived 'classes' from this one. User 
     *                  only stores a pointer to LexatomLoader, and requires a 
     *                  way to delete the whole object.
     *                                                                       */
    void        (*delete_self)(struct compilator_LexatomLoader_tag*);         
                                                                             
                                                                             
    struct {
        /* PASSIVE API: Lexical analyzer requests LexatomLoader to fill its
         *              buffer.                                              */

        /* -- 'Read' reads N lexatoms from a stream into a buffer 
         * (independent of their size)                                       */
        size_t      (*load_lexatoms)(struct compilator_LexatomLoader_tag*,
                                     compilator_lexatom_t* memory, 
                                     const size_t         N,
                                     bool*                end_of_stream_f,
                                     bool*                encoding_error_f);

        /* ACTIVE: User fills the buffer manually                                
         *
         * To be implemented by the derived class ...                        */
        void        (*fill_prepare)(struct compilator_LexatomLoader_tag*  me,
                                    compilator_Buffer*                    buffer,
                                    void**                                begin_p,
                                    const void**                          end_p);
        ptrdiff_t   (*fill_finish)(struct compilator_LexatomLoader_tag* me,
                                   compilator_lexatom_t*                   BeginP,
                                   const compilator_lexatom_t*             EndP,
                                   const void*                         FilledEndP);
        void        (*get_fill_boundaries)(struct compilator_LexatomLoader_tag*  alter_ego,
                                           compilator_Buffer*                    buffer,
                                           void**                                begin_p, 
                                           const void**                          end_p);

        void        (*print_this)(struct compilator_LexatomLoader_tag*  alter_ego);

        /* destruct_self: Free resources occupied by 'me' BUT NOT 'myself'.
         * delete_self:   Free resources occupied by 'me' AND 'myself'.      */
        void        (*destruct_self)(struct compilator_LexatomLoader_tag*);
    } derived;
} compilator_LexatomLoader;

inline compilator_LexatomLoader*
compilator_LexatomLoader_new(compilator_ByteLoader*           byte_loader, 
                             struct compilator_Converter_tag* converter);

inline void    
compilator_LexatomLoader_setup(compilator_LexatomLoader*   me,
                               size_t       (*load_lexatoms)(compilator_LexatomLoader*,
                                                             compilator_lexatom_t*, 
                                                             const size_t, bool*, bool*),
                               ptrdiff_t    (*stomach_byte_n)(compilator_LexatomLoader*),
                               void         (*stomach_clear)(compilator_LexatomLoader*),
                               void         (*destruct_self)(compilator_LexatomLoader*),
                               void         (*derived_fill_prepare)(compilator_LexatomLoader* me,
                                                                    compilator_Buffer*        buffer,
                                                                    void**                    begin_p,
                                                                    const void**              end_p),
                               ptrdiff_t    (*derived_fill_finish)(compilator_LexatomLoader*   me,
                                                                   compilator_lexatom_t*       BeginP,
                                                                   const compilator_lexatom_t* EndP,
                                                                   const void*                FilledEndP),
                               void         (*derived_get_fill_boundaries)(compilator_LexatomLoader* alter_ego,
                                                                           compilator_Buffer*        buffer,
                                                                           void**                    begin_p, 
                                                                           const void**              end_p),
                               void         (*derived_print_this)(compilator_LexatomLoader*  alter_ego),
                               compilator_ByteLoader*  byte_loader, 
                               ptrdiff_t               ByteNPerCharacter);

inline ptrdiff_t  
    compilator_LexatomLoader_load(compilator_LexatomLoader*  me, 
                                  compilator_lexatom_t*         RegionBeginP, 
                                  const ptrdiff_t            Size,
                                  compilator_stream_position_t  CharacterIndexBegin,
                                  bool*                      end_of_stream_f,
                                  bool*                      encoding_error_f);

inline bool       
    compilator_LexatomLoader_lexatom_index_reset(compilator_LexatomLoader* me);

inline void       
    compilator_LexatomLoader_print_this(compilator_LexatomLoader* me);



#include "compilator\lib\buffer/lexatoms/LexatomLoader_Converter"
#include "compilator\lib\buffer/lexatoms/LexatomLoader_Plain"

#endif /* QUEX_INCLUDE_GUARD_compilator__BUFFER__BUFFERFILLER */
