/* -*- C++ -*-   vim: set syntax=cpp: 
 * (C) 2004-2009 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY
 */
#ifndef QUEX_INCLUDE_GUARD_quexProcessed_Token__TOKEN__TOKEN__GENERATED
#define QUEX_INCLUDE_GUARD_quexProcessed_Token__TOKEN__TOKEN__GENERATED


#   line 2 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"

#include <stddef.h>
#include <iostream>
#include <string>
#include <quexProcessed/lib/quex/compatibility/stdint.h>
#include <quexProcessed/lib/quex/MemoryManager>

#include <quexProcessed/lib/quex/asserts>
#include <quexProcessed/lib/lexeme/basics>
#include <quexProcessed/lib/lexeme/converter-from-lexeme>



extern quexProcessed_lexatom_t quexProcessed_LexemeNull;
extern const char*       quexProcessed_map_token_id_to_name(const quexProcessed_token_id_t);



   
#   line 29 "quexProcessed/quexProcessed-token"

 
#include "quexProcessed/quexProcessed-configuration"



class quexProcessed_Token;

inline void         quexProcessed_Token_construct(quexProcessed_Token*);
inline void         quexProcessed_Token_copy(quexProcessed_Token*, const quexProcessed_Token*);
inline void         quexProcessed_Token_destruct(quexProcessed_Token*);

/* NOTE: Setters and getters as in the C++ version of the token class are not
 *       necessary, since the members are accessed directly.                   */

inline void         quexProcessed_Token_set(quexProcessed_Token*         me, 
                                              const quexProcessed_token_id_t ID);


inline bool         quexProcessed_Token_take_text(quexProcessed_Token*            me, 
                                                    const quexProcessed_lexatom_t* Begin, 
                                                    const quexProcessed_lexatom_t* End);





class QUEX_quexProcessed_SETTING_USER_CLASS_DECLARATION_EPILOG_EXT quexProcessed_Token {
public:
    quexProcessed_Token();
    quexProcessed_Token(const quexProcessed_Token& That);
    /* operator=(..): USE WITH CAUTION--POSSIBLE MAJOR PERFORMANCE DECREASE! 
     *                BETTER USE __copy(That)                                */
    quexProcessed_Token& operator=(const quexProcessed_Token& That);
    virtual ~quexProcessed_Token();


#   line 27 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"
    const quexProcessed_lexatom_t* text;
#   line 69 "quexProcessed/quexProcessed-token"

#   line 28 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"
    size_t                   number;
#   line 73 "quexProcessed/quexProcessed-token"


public:

#   line 27 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"
    const quexProcessed_lexatom_t* get_text() const                           { return text; }
#   line 27 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"
    void                     set_text(const quexProcessed_lexatom_t*& Value)  { text = Value; }
#   line 28 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"
    size_t                   get_number() const                         { return number; }
#   line 28 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"
    void                     set_number(size_t Value)                   { number = Value; }
#   line 86 "quexProcessed/quexProcessed-token"

    void set(const quexProcessed_token_id_t ID) { id = ID; }
    void set(const quexProcessed_token_id_t ID, const  quexProcessed_lexatom_t*& Value0, const size_t& Value1)
    { id = ID; text = Value0; number = Value1; }


    public:
        /* _line_n, _column_n, and id are public, so that the token policy 
         * can access it. making it private would imply complications for 
         * user customized token classes. The token policies should be the
         * same for C and Cpp.                                               */
        quexProcessed_token_id_t    id;


    public:
        quexProcessed_token_line_n_t    _line_n;
        quexProcessed_token_line_n_t    line_number() const                                 { return _line_n; }
        void                      set_line_number(const quexProcessed_token_line_n_t Value) { _line_n = Value; }


    public:
        quexProcessed_token_column_n_t  _column_n;
        quexProcessed_token_column_n_t  column_number() const                                   { return _column_n; }
        void                      set_column_number(const quexProcessed_token_column_n_t Value) { _column_n = Value; }

    public:
#   define self (*this)

#   line 112 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"

        operator 
        const std::string() const
        { return std::string(get_string()); }

        const std::string   get_string() const 
        {
            std::string  tmp(quexProcessed_map_token_id_to_name(self.id));
            tmp += " '" + quexProcessed_lexeme_to_pretty_char(self.text) + "'";
            return tmp;
        }
        const char*        id_name() const
        { return quexProcessed_map_token_id_to_name(id); }
   
#   line 130 "quexProcessed/quexProcessed-token"

#   undef  self

    private:
        friend void quexProcessed_Token_copy(quexProcessed_Token*       __this, 
                                         const quexProcessed_Token* That);
        friend bool quexProcessed_Token_take_text(quexProcessed_Token*             __this, 
                                              const quexProcessed_lexatom_t*  Begin, 
                                              const quexProcessed_lexatom_t*  End);
};




#   line 135 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"





inline std::ostream&
operator<<(std::ostream& ostr, const quexProcessed_Token& Tok)
{ ostr << Tok.get_string(); return ostr; }


#include <quexProcessed/lib/lexeme/basics.i>
   
#   line 158 "quexProcessed/quexProcessed-token"




extern quexProcessed_lexatom_t quexProcessed_LexemeNull;



#endif /* QUEX_INCLUDE_GUARD_quexProcessed_Token__TOKEN__TOKEN__GENERATED */

/* This content is pasted into header, so the include guard is superfluous. 
 * It is left in place, so that if some time later the code generator is 
 * adapted to generate independent files, it will still work safely.          */
#ifndef QUEX_INCLUDE_GUARD_quexProcessed_Token__TOKEN__TOKEN__GENERATED_I
#define QUEX_INCLUDE_GUARD_quexProcessed_Token__TOKEN__TOKEN__GENERATED_I

#include "quexProcessed/quexProcessed-token"



inline
quexProcessed_Token::quexProcessed_Token()
{
#   define self (*this)
#   define LexemeNull  (&quexProcessed_LexemeNull)

#   line 33 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"

       self.number = 0;
       self.text   = LexemeNull;
   
#   line 190 "quexProcessed/quexProcessed-token"

#   undef  LexemeNull
#   undef  self
}

inline
quexProcessed_Token::quexProcessed_Token(const quexProcessed_Token& Other)
{
   quexProcessed_Token_copy(this, &Other);
#   define self (*this)
#   define LexemeNull  (&quexProcessed_LexemeNull)

#   line 33 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"

       self.number = 0;
       self.text   = LexemeNull;
   
#   line 208 "quexProcessed/quexProcessed-token"

#   undef  LexemeNull
#   undef  self
}

inline
quexProcessed_Token::~quexProcessed_Token()
{
#   define self (*this)
#   define LexemeNull  (&quexProcessed_LexemeNull)

#   line 38 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"

       if( self.text != LexemeNull ) {
           quex::MemoryManager_free((void*)self.text,
                                      E_MemoryObjectType_TEXT);
           self.text = LexemeNull;
       }
   
#   line 228 "quexProcessed/quexProcessed-token"

#   undef  LexemeNull
#   undef  self
}

inline quexProcessed_Token& 
quexProcessed_Token::operator=(const quexProcessed_Token& That) 
{ /* 'this != &That' checked in 'copy' */ quexProcessed_Token_copy(this, &That); return *this; }

inline void
quexProcessed_Token_construct(quexProcessed_Token* __this)
{
    /* Explicit constructor call by 'placement new' */
    new ((void*)__this) quexProcessed_Token;
}

inline void
quexProcessed_Token_destruct(quexProcessed_Token* __this)
{
    if( ! __this ) return;
    __this->quexProcessed_Token::~quexProcessed_Token();  
}

inline void
quexProcessed_Token_copy(quexProcessed_Token* __this, const quexProcessed_Token* __That)
{
#   define self  (*__this)
#   define Other (*__That)
#   define LexemeNull  (&quexProcessed_LexemeNull)
    if( __this == __That ) { return; }

#   line 46 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"

        self.id  = Other.id;

        if( self.text != LexemeNull ) {
            quex::MemoryManager_free((void*)self.text, E_MemoryObjectType_TEXT);
        }
        if( Other.text != LexemeNull ) {
            self.text = quexProcessed_lexeme_clone(self.text, 
                                                quexProcessed_lexeme_length(Other.text));
            if( ! self.text ) self.text = LexemeNull;
        }
        self.number = Other.number;

           self._line_n     = Other._line_n;
         self._column_n = Other._column_n;
   
#   line 277 "quexProcessed/quexProcessed-token"

#   undef LexemeNull
#   undef Other
#   undef self
   /* If the user even misses to copy the token id, then there's
    * something seriously wrong.                                 */
   __quex_assert(__this->id == __That->id);
      __quex_assert(__this->_line_n == __That->_line_n);
    __quex_assert(__this->_column_n == __That->_column_n);
}


inline bool 
quexProcessed_Token_take_text(quexProcessed_Token*         __this, 
                           const quexProcessed_lexatom_t* Begin, 
                           const quexProcessed_lexatom_t* End)
/* RETURNS: true -- if the token claims ownership over the given memory.
 *          false -- if no ownership is claimed.                             */
{
#   define self      (*__this)
#   define LexemeNull  (&quexProcessed_LexemeNull)
    (void)__this;

#   line 63 "/usr/local/Cellar/quex/0.70.0/libexec/quex/code_base/token/CppDefault.qx"


#       if 0
        /* Hint for debug: To check take_text change "#if 0" to "#if 1" */
        {
            const quexProcessed_lexatom_t* it = (void*)0x0;
            printf("previous:  '");
            if( self.text != LexemeNull ) {
                for(it = self.text; *it ; ++it) printf("%04X.", (int)*it);
                printf("%04X.", (int)*it);
            }
            printf("'\n");
            printf("take_text: '");
            for(it = Begin; it != End; ++it) printf("%04X.", (int)*it);
            printf("%04X.", (int)*it);
            printf("'\n");
        }
#       endif

        if( self.text != LexemeNull ) {
            quex::MemoryManager_free((void*)self.text, E_MemoryObjectType_TEXT);
        }
        if( Begin != LexemeNull ) {
            __quex_assert(End >= Begin);
            self.text = quexProcessed_lexeme_clone(Begin, (size_t)(End - Begin));
            if( ! self.text ) self.text = LexemeNull;
            *((quexProcessed_lexatom_t*)(self.text + (End - Begin))) = (quexProcessed_lexatom_t)0;
        } else {
            self.text = LexemeNull;
        }

#       if 0
        /* Hint for debug: To check take_text change "#if 0" to "#if 1"       */
        {
            const quexProcessed_lexatom_t* it = 0x0;
            printf("after:     '");
            if( self.text != LexemeNull ) { 
                for(it = self.text; *it ; ++it) printf("%04X.", (int)*it);
                printf("%04X.", (int)*it);
            }
            printf("'\n");
        }
#       endif

        /* This token copied the text from the chunk into the string, 
         * so we do not claim ownership over it.                             */
        return false;
   
#   line 350 "quexProcessed/quexProcessed-token"

#   undef  LexemeNull
#   undef  self
    /* Default: no ownership.                                                */
    return false;
}






#endif /* QUEX_INCLUDE_GUARD_quexProcessed_Token__TOKEN__TOKEN__GENERATED_I */