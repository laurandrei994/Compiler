/* -*- C++ -*- vim:set syntax=c: */
#ifndef QUEX_INCLUDE_GUARD_quexProcessed__ANALYZER__STATISTICS
#define QUEX_INCLUDE_GUARD_quexProcessed__ANALYZER__STATISTICS
/* STATISTICS _________________________________________________________________
 *
 * (C) Frank-Rene Schaefer
 * 
 * Whenever a character occurs in a state, the state's protocol structure is
 * considered which contains an statistics_interval_list. This list contains
 * information about the intervals and their counters. The boundaries of the
 * intervals are implemented in 'const' so that they may be stored in a 
 * ROM memory where else the counters are stored in variables, so they must
 * be stored in RAM. The amount of RAM memory consumed for counter can be
 * controlled by the macro
 *
 *                  QUEX_TYPE_STATISTICS_COUNTER
 *
 * For the counters it holds that 
 *
 *   counter[i] = number of occurrences of characters C such that
 *
 *                boundary[i-1] <= C < boundary[i]
 *
 *                This is true for all '0 < i < boundary_n'. The number of 
 *                counters is equal to 'boundary_n + 1'.
 *
 *   counter[0] = number of occurrences of C where
 *
 *                C < boundary[0]
 *
 *                which means, that boundary[0] is actually 
 *
 *   counter[boundary_n] = number of occurrences of C where
 *
 *                         boundary[boundary_n - 1] <= C 
 *
 * The initial structures of statistics_interval_list and statistics_state
 * objects are auto-generated by Quex. All objects of statistics_state-s are
 * lined up into a statistics_state_list so that it can be iterated over it
 * to save the whole statistics into a file.
 *
 * FUNCTIONS __________________________________________________________________
 *
 * quexProcessed_statistics_state_count(S, C):
 *
 * Considers the statistics_state object 'S' and searches in it for the interval
 * that belongs to character 'C'. It increments the counter for this interval 
 * by one. This function is called at the entry of a state before the transition
 * map is entered. The counting is webbed into the macro 
 *
 *                       __quex_debug_state()
 *
 * so that the generated engine code is no different from the normal. For a
 * given state with index 'X' the following call is generated:
 *
 *    quexProcessed_statistics_state_count(&quexProcessed_statistics_state_X, *me->buffer._read_p);
 * ____________________________________________________________________________
 *
 * quexProcessed_statistics_state_save(Filename):
 *
 * This function saves all statistics data into a file given by 'Filename'. It
 * is called upon destruction of the lexical analyzer object. 
 * ____________________________________________________________________________*/
#include "quexProcessed/lib/definitions"

typedef struct QUEX_quexProcessed_SETTING_USER_CLASS_DECLARATION_EPILOG_EXT { 
    const size_t                         boundary_n;  
    const quexProcessed_lexatom_t* const     boundary;
    QUEX_TYPE_STATISTICS_COUNTER* const  counter;     /* size = boundary_n + 1 */
} quexProcessed_statistics_interval_list;

typedef struct QUEX_quexProcessed_SETTING_USER_CLASS_DECLARATION_EPILOG_EXT { 
    const char*                mode_name;
    const size_t               state_index;
    quexProcessed_statistics_interval_list interval_list;
} quexProcessed_statistics_state;

extern const quexProcessed_statistics_state  quexProcessed_statistics_state_list[];
extern const quexProcessed_statistics_state* quexProcessed_statistics_state_list_end;

inline void quexProcessed_statistics_state_count(const quexProcessed_statistics_state* S, 
                                                   quexProcessed_lexatom_t C);
inline void quexProcessed_statistics_save(const char* Filename);

#endif /* __INCLUDE_GUARD__ANALYZER__STATISTICS */


