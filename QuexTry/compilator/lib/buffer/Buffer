/* vim: set ft=cpp: -*- C++ -*- 
 *
 * PURPOSE: Buffer handling, loading and maintanance
 *
 * All lexical analysis in Quex happens on content located in a region of 
 * memory, which is quickly accessible by the processor: The buffer. This 
 * file-and all files prefixed by 'Buffer'-implement what is required from
 * such an entity, as is:
 *
 *  -- pointers which are relevant to the analysis:
 *     '_read_p', '_lexatom_at_lexeme_start', etc.
 *  -- relation between buffer content and the stream which feeds it.
 *  -- the buffer's memory.
 *  -- loading procedures to read from a stream.
 *  -- functions which allow to fill content into the buffer.
 *  -- callbacks on buffer events.
 *  -- functions to manage the buffer's memory.
 *
 * A special feauture of the buffer management, is that it may split buffers
 * in case that it is required for 'include' handling, i.e. when streams
 * include other streams and come back. This is referred to as 'nesting'.
 *
 * (C) Frank-Rene Schaefer                                                    */
#ifndef QUEX_INCLUDE_GUARD_compilator__BUFFER__BUFFER
#define QUEX_INCLUDE_GUARD_compilator__BUFFER__BUFFER

#include "compilator\lib\definitions"
#include "compilator\lib\quex/MemoryManager"



struct compilator_Buffer_tag;
struct compilator_LexatomLoader_tag;


typedef struct QUEX_compilator_SETTING_USER_CLASS_DECLARATION_EPILOG_EXT { 
    E_Ownership                    ownership;
    /* ownership == E_Ownership_INCLUDING_BUFFER means that the memory is 
     *              split from an including buffer.                          
     * else:        including_buffer = 0.                                    */
    struct compilator_Buffer_tag*  including_buffer;  

    /* (*) Buffer Memory Setup:
     *      memory[0]             = lower buffer limit code lexatom
     *      memory[1]             = first char of content
     *      ...
     *      memory[BUFFER_SIZE-2] = last char of content
     *      memory[BUFFER_SIZE-1] = upper buffer limit code lexatom          */
    compilator_lexatom_t*  _front;         /* first lexatom in buffer (BLC)     */
    compilator_lexatom_t*  _back;          /* last lexatom in buffer  (BLC)     */

} compilator_BufferMemory;

inline void    compilator_BufferMemory_construct(compilator_BufferMemory*      me, 
                                                      compilator_lexatom_t*            Memory, 
                                                      const size_t                  Size,
                                                      E_Ownership                   Ownership,
                                                      struct compilator_Buffer_tag* IncludingBuffer);
inline void    compilator_BufferMemory_destruct(compilator_BufferMemory* me);

inline size_t  compilator_BufferMemory_size(compilator_BufferMemory*);
inline void    compilator_BufferMemory_adapt_to_new_memory_location(compilator_BufferMemory*  me, 
                                                                         compilator_lexatom_t*        NewMemoryP); 
inline void    compilator_BufferMemory_resources_absent_mark(compilator_BufferMemory* me);
inline bool    compilator_BufferMemory_resources_absent(compilator_BufferMemory* me); 
inline bool    compilator_BufferMemory_check_chunk(const compilator_lexatom_t* Front, 
                                                        size_t                   Size, 
                                                        const compilator_lexatom_t* EndOfFileP);
inline void    compilator_BufferMemory_print_this(compilator_BufferMemory* me);

typedef struct {
    /* Event handlers:                                          
     *
     * on_buffer_before_change: If the user maintained pointers into the 
     *     buffer, this callback indicates that everything from 'BeginP' to 
     *     'EndP' needs to be copied somewhere else.
     *
     * on_buffer_overflow: Distance between current '_read_p' and the lexeme 
     *     start plus the fallback region are too big for the current 
     *     buffer's size.                                                 
     *                                                                    */
    void   (*on_buffer_before_change)(void* aux);
    void   (*on_buffer_overflow)(void* aux);

    /* Auxiliary data passed to handlers. This is probably the 'lexer'.   */
    void*  aux; 
} compilator_Buffer_event_callbacks;

typedef struct QUEX_compilator_SETTING_USER_CLASS_DECLARATION_EPILOG_EXT compilator_Buffer_tag { 
/* Buffer of lexatoms on which the lexical analyzer is running. 
 *
 * Character Stream:
 * (by LexatomLoader)     
 *     
 *    lexatom_index_end_of_stream ------------------------.
 *    lexatom_index_begin -----------------.              |
 *                                         |              |
 *    lexatom index:   0  1  2  3  4  6  6  7  8  9  10 11 12 13 14 ...
 *  
 *    stream:           [aa.bb.cc.dd.ee.ff:gg.hh.ii.jj.kk.ll:mm.nn.oo.pp.qq ...
 *                              .---------'                 |
 * Buffer:                      |                 .---------' 
 *                           [00|gg.hh.ii.jj.kk.ll|00.??.??.??.??|00]
 *                            |                    |              |
 *           _front ----------'                    |              |
 *           input.end_p --------------------------'              |
 *           _back -----------------------------------------------'
 * 
 * 'lexatom_index_end_of_stream == -1' => end of stream has not yet been
 * detected.                                                                  */
                                                                             
    compilator_BufferMemory               _memory;                                        
    struct compilator_LexatomLoader_tag*  filler;

                                                                             
    /* Information about content loaded into the buffer.                      */
    struct {                                                                 
        compilator_lexatom_t*        end_p;                                     
        compilator_stream_position_t lexatom_index_begin;                     
        /* Character index + 1 of the last lexatom in the stream.             */
        compilator_stream_position_t lexatom_index_end_of_stream; 
    } input;

    /* (*) Iterator positions for lexical analysis                            */
    compilator_lexatom_t*       _read_p;                                        
    compilator_lexatom_t*       _lexeme_start_p;                                
    /* If, for a given mode, the pre-contexts have a definite maximum length,
     * then the number of lexatoms to be maintained backwards upon reload can
     * be determined: the 'fallback number'. Even if not, the fallback number
     * may prevent costly reload procedures.                                 */
    ptrdiff_t                _fallback_n;

    /* (*) When data from a different stream position is loaded than what is 
     *     required for the current analysis step, the current position is 
     *     stored in '', so that it can be 
     *     restored before the analysis forward step starts.                  */
    compilator_stream_position_t _backup_lexatom_index_of_lexeme_start_p;
                                                                             
    /* (*) Information about previous content:
     *
     * _lexatom_at_lexeme_start: lexatom that has been covered by a 
     *                           terminating zero. Reset upon restart of 
     *                           analysis.
     * _lexatom_before_lexeme_start: Used to check whether the lexeme's 
     *                             preceeding lexatom was newline. 
     *                             (i.e. for begin-of-line pre-context).      */
    compilator_lexatom_t      _lexatom_at_lexeme_start;      
    

    const void*          (*fill)(struct compilator_Buffer_tag*  me, 
                                 const void*                    ContentBegin,
                                 const void*                    ContentEnd);
    bool                 (*fill_prepare)(struct compilator_Buffer_tag*  me, 
                                         void**                         begin_p, 
                                         const void**                   end_p);
    void                 (*fill_finish)(struct compilator_Buffer_tag* me,
                                        const void*                   FilledEndP);

    compilator_lexatom_t*   (*begin)(const struct compilator_Buffer_tag* me);
    compilator_lexatom_t*   (*end)(const struct compilator_Buffer_tag* me);
    ptrdiff_t            (*size)(const struct compilator_Buffer_tag* me);

    compilator_lexatom_t*   (*content_space_end)(const struct compilator_Buffer_tag* me);
    ptrdiff_t            (*content_space_size)(const struct compilator_Buffer_tag* me);

    compilator_lexatom_t*   (*content_begin)(const struct compilator_Buffer_tag* me);
    compilator_lexatom_t*   (*content_end)(const struct compilator_Buffer_tag* me);
    ptrdiff_t            (*content_size)(const struct compilator_Buffer_tag* me);

    compilator_Buffer_event_callbacks event;

} compilator_Buffer;

typedef struct {
    compilator_lexatom_t*         front_p;
    compilator_lexatom_t*         back_p;
    compilator_lexatom_t*         read_p;
    compilator_lexatom_t*         end_p;
    compilator_lexatom_t*         lexeme_start_p;
    compilator_stream_position_t  lexatom_index_begin;
} compilator_BufferInvariance;

/* Constructor, Destructor ___________________________________________________*/
inline void  compilator_Buffer_construct(compilator_Buffer*                    me, 
                                              struct compilator_LexatomLoader_tag*  filler,
                                              compilator_lexatom_t*                    memory,
                                              const size_t                          MemorySize,
                                              compilator_lexatom_t*                    EndOfFileP,
                                              const ptrdiff_t                       FallbackN,
                                              E_Ownership                           Ownership,
                                              compilator_Buffer*                    IncludingBuffer);
inline bool  compilator_Buffer_nested_construct(compilator_Buffer*                   me,
                                                     compilator_Buffer*                   nested,
                                                     struct compilator_LexatomLoader_tag* filler);
inline void  compilator_Buffer_destruct(compilator_Buffer* me);

inline void  compilator_Buffer_init(compilator_Buffer* me,
                                         compilator_lexatom_t* EndOfFileP); 
inline void  compilator_Buffer_shallow_copy(compilator_Buffer*       drain, 
                                                 const compilator_Buffer* source);

/* States: 'resources absent' and 'dysfunctional'                             */
inline void  compilator_Buffer_resources_absent_mark(compilator_Buffer* me);
inline bool  compilator_Buffer_resources_absent(compilator_Buffer* me);
inline void  compilator_Buffer_dysfunctional_set(compilator_Buffer*  me);
inline bool  compilator_Buffer_dysfunctional(compilator_Buffer*  me);

/* Move ______________________________________________________________________*/
inline ptrdiff_t  compilator_Buffer_move_towards_begin(compilator_Buffer*  me, 
                                                            ptrdiff_t           MoveDistance,
                                                            compilator_lexatom_t** position_register,
                                                            const size_t        PositionRegisterN);
inline ptrdiff_t  compilator_Buffer_move_towards_begin_undo(compilator_Buffer*           me,
                                                                 compilator_BufferInvariance* bi,
                                                                 ptrdiff_t                    move_distance);
inline ptrdiff_t  compilator_Buffer_move_towards_end(compilator_Buffer* me, 
                                                          ptrdiff_t          move_distance);
inline ptrdiff_t  compilator_Buffer_move_get_max_distance_towards_begin(compilator_Buffer*   me); 
inline ptrdiff_t  compilator_Buffer_move_get_max_distance_towards_end(compilator_Buffer* me);
inline ptrdiff_t  compilator_Buffer_move_size_towards_begin(compilator_Buffer* me, 
                                                                 ptrdiff_t move_distance);
inline ptrdiff_t  compilator_Buffer_move_get_distance_forward_to_contain(compilator_Buffer*         me,
                                                                              compilator_stream_position_t* lexatom_index_to_be_contained);
inline void       compilator_Buffer_move_backup_lexatom_index_of_lexeme_start(compilator_Buffer* me,
                                                                                   ptrdiff_t          move_distance);

/* Buffer pointers ___________________________________________________________*/
inline void  compilator_Buffer_pointers_add_offset(compilator_Buffer*  me,
                                                        ptrdiff_t           offset,
                                                        compilator_lexatom_t** position_register,
                                                        const size_t        PositionRegisterN);
inline bool  compilator_Buffer_adapt_to_new_memory_location(compilator_Buffer* me,
                                                                 compilator_lexatom_t* new_memory,
                                                                 ptrdiff_t          NewSize);
inline bool  compilator_Buffer_has_intersection(compilator_Buffer*       me,
                                                     const compilator_lexatom_t* Begin,
                                                     ptrdiff_t                Size);
inline bool  compilator_Buffer_is_end_of_stream_inside(compilator_Buffer* me);

/* Memory nesting ____________________________________________________________*/
inline bool   compilator_Buffer_nested_extend(compilator_Buffer*  me,
                                                 ptrdiff_t           SizeAdd);
inline bool   compilator_Buffer_nested_negotiate_extend(compilator_Buffer*  me, 
                                                             float               Factor);
inline bool   compilator_Buffer_nested_migrate(compilator_Buffer*  me,
                                                    compilator_lexatom_t*  memory,
                                                    ptrdiff_t           MemoryLexatomN,
                                                    E_Ownership         Ownership);
inline 
compilator_Buffer* compilator_Buffer_nested_find_root(compilator_Buffer* me);
inline 
ptrdiff_t          compilator_Buffer_nested_free_front(compilator_Buffer* me);
inline 
compilator_Buffer* compilator_Buffer_nested_get(compilator_Buffer* me, 
                                                compilator_Buffer* tail);


/* Loading ___________________________________________________________________*/
inline 
E_LoadResult  compilator_Buffer_load_forward(compilator_Buffer*  me,
                                             compilator_lexatom_t** position_register,
                                             const size_t        PositionRegisterN);
inline 
bool          compilator_Buffer_load_forward_to_contain(compilator_Buffer* me, 
                                                        compilator_stream_position_t LexatomIndexToBeContained);
inline 
E_LoadResult  compilator_Buffer_load_backward(compilator_Buffer* me);
inline 
bool          compilator_Buffer_load_backward_to_contain(compilator_Buffer* me, 
                                                         compilator_stream_position_t LexatomIndexToBeContained);
inline 
bool          compilator_Buffer_move_and_load(compilator_Buffer*  me, 
                                              compilator_lexatom_t** position_register,
                                              size_t              PositionRegisterN,
                                              ptrdiff_t           move_distance, 
                                              bool*               encoding_error_f, 
                                              ptrdiff_t*          loaded_n);
inline 
ptrdiff_t     compilator_Buffer_move_and_load_backward(compilator_Buffer* me, 
                                                       ptrdiff_t          move_distance,
                                                       bool*              encoding_error_f, 
                                                       ptrdiff_t*         load_request_n);

/* Member attributes. */
inline bool       compilator_Buffer_is_empty(compilator_Buffer* me);
inline bool       compilator_Buffer_is_end_of_stream(compilator_Buffer*);
inline bool       compilator_Buffer_is_begin_of_stream(compilator_Buffer*);

inline void       compilator_Buffer_register_content(compilator_Buffer* me,
                                                          compilator_lexatom_t*        EndOfInputP,
                                                          compilator_stream_position_t CharacterIndexBegin);
inline void       compilator_Buffer_register_eos(compilator_Buffer* me,
                                                      compilator_stream_position_t CharacterIndexEndOfStream);
inline compilator_stream_position_t  
                       compilator_Buffer_input_lexatom_index_end(compilator_Buffer* me);
inline compilator_stream_position_t  
                       compilator_Buffer_input_lexatom_index_begin(compilator_Buffer* me);

/* Tell & seek '_read_p' to/from lexatom index. ______________________________*/
inline compilator_stream_position_t  
                       compilator_Buffer_tell(compilator_Buffer*);
inline bool       compilator_Buffer_seek(compilator_Buffer*, 
                                              const compilator_stream_position_t LexatomIndex);
inline bool       compilator_Buffer_seek_forward(compilator_Buffer*, const ptrdiff_t CharacterN);
inline bool       compilator_Buffer_seek_backward(compilator_Buffer*, const ptrdiff_t CharacterN);
inline bool       compilator_Buffer_finish_seek_based_on_read_p(compilator_Buffer* me);

/* Callbacks _________________________________________________________________*/
inline bool       compilator_Buffer_callbacks_on_cannot_move_towards_begin(compilator_Buffer*  me, 
                                                                                ptrdiff_t*          move_distance);
inline void       compilator_Buffer_callbacks_set(compilator_Buffer* me,
                                                       void   (*on_buffer_before_change)(void* aux),
                                                       void   (*on_buffer_overflow)(void* aux),
                                                       void*  aux);
inline void       compilator_Buffer_callbacks_on_buffer_before_change(compilator_Buffer* me);
inline void       compilator_Buffer_callbacks_on_buffer_overflow(compilator_Buffer* me);

/* Member functions __________________________________________________________*/

/* User's manual buffer filling.                                              */
inline const void*          compilator_Buffer_fill(compilator_Buffer*  me, 
                                                        const void*         ContentBegin,
                                                        const void*         ContentEnd);
inline bool                 compilator_Buffer_fill_prepare(compilator_Buffer*  me, 
                                                                void**              begin_p, 
                                                                const void**        end_p);
inline void                 compilator_Buffer_fill_finish(compilator_Buffer* me,
                                                               const void*        FilledEndP);

/* Memory access.                                                             */
inline compilator_lexatom_t*   compilator_Buffer_memory_begin(const compilator_Buffer* me);
inline compilator_lexatom_t*   compilator_Buffer_memory_end(const compilator_Buffer* me);
inline ptrdiff_t            compilator_Buffer_memory_size(const compilator_Buffer* me);

inline compilator_lexatom_t*   compilator_Buffer_memory_content_space_end(const compilator_Buffer* me);
inline ptrdiff_t            compilator_Buffer_memory_content_space_size(const compilator_Buffer* me);

inline compilator_lexatom_t*   compilator_Buffer_memory_content_begin(const compilator_Buffer* me);
inline compilator_lexatom_t*   compilator_Buffer_memory_content_end(const compilator_Buffer* me);
inline ptrdiff_t            compilator_Buffer_memory_content_size(const compilator_Buffer* me);


/* Print _____________________________________________________________________*/
inline void compilator_Buffer_print_this(compilator_Buffer*);
inline void compilator_Buffer_print_content(compilator_Buffer*);


/* BufferInvariance __________________________________________________________*/
inline void compilator_BufferInvariance_construct(compilator_BufferInvariance* me, 
                                                       compilator_Buffer*           subject);
inline void compilator_BufferInvariance_assert(compilator_BufferInvariance* me, 
                                                    compilator_Buffer*           subject,
                                                    bool                         SameF);
inline void compilator_BufferInvariance_restore(compilator_BufferInvariance* me, 
                                                     compilator_Buffer*           subject);


#include "compilator\lib\buffer/lexatoms/LexatomLoader"

#endif /* QUEX_INCLUDE_GUARD_compilator__BUFFER__BUFFER */
